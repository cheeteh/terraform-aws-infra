apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: grafana-agent
spec:
  interval: 5m
  chart:
    spec:
      version: "0.38.0"
      chart: grafana-agent
      sourceRef:
        kind: HelmRepository
        name: grafana-agent
      interval: 60m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  # https://github.com/grafana/agent/blob/main/operations/helm/charts/grafana-agent/values.yaml
  values:
    service:
      type: ClusterIP
    agent:
      extraPorts:
        - name: otlp-grpc
          port: 4317
          targetPort: 4317
          protocol: TCP
        - name: otlp-http
          port: 4318
          targetPort: 4318
          protocol: TCP
      configMap:
        content: |
            otelcol.receiver.otlp "example" {
              grpc {
                endpoint = "127.0.0.1:4317"
              }

              http {
                endpoint = "127.0.0.1:4318"
              }

              output {
                metrics = [otelcol.processor.batch.example.input]
                logs    = [otelcol.processor.batch.example.input]
                traces  = [otelcol.processor.batch.example.input]
              }
            }

            otelcol.processor.batch "example" {
              output {
                metrics = [otelcol.exporter.prometheus.grafana_cloud_prometheus.input]
                logs    = [otelcol.exporter.loki.grafana_cloud_loki.input]
                traces  = [otelcol.exporter.otlp.grafana_cloud_tempo.input]
              }
            }

            otelcol.exporter.otlp "grafana_cloud_tempo" {
              client {
                endpoint = "http:://tempo-distributor:3100"
              }
            }

            otelcol.exporter.prometheus "grafana_cloud_prometheus" {
                  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
            }

            prometheus.remote_write "grafana_cloud_prometheus" {
                endpoint {
                    url = "http://mimir-nginx.monitoring.svc.cluster.local:80/api/v1/push"
                }
            }

            otelcol.exporter.loki "grafana_cloud_loki" {
              forward_to = [loki.write.grafana_cloud_loki.receiver]
            }

            loki.write "grafana_cloud_loki" {
              endpoint {
                url = "http://loki-loki-distributed-gateway/loki/api/v1/push"
              }
            }

            logging {
              level  = "info"
              format = "logfmt"
            }

            discovery.kubernetes "pods" {
              role = "pod"
            }

            discovery.kubernetes "nodes" {
              role = "node"
            }

            discovery.kubernetes "services" {
              role = "service"
            }

            discovery.kubernetes "endpoints" {
              role = "endpoints"
            }

            discovery.kubernetes "endpointslices" {
              role = "endpointslice"
            }

            discovery.kubernetes "ingresses" {
              role = "ingress"
            }